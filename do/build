#!/usr/bin/env bash
set -eu -o pipefail

function usage()
{
  usage_default
}

function help()
{
  help_default
}

function pre_docker()
{
  # this function is called before the docker container runs
  mkdir -p "${OUTPUT_DIR}"

  if [[ "${BUILD_DOCKER}" -eq 1 ]]; then
    echo "--- :aws: Log into AWS ${AWS_REGION-} Elastic Container Registry..."
    aws_login

    echo "--- :docker: Building the third-party docker image for '${PROJECT_REPO-}' - branch '${GIT_BRANCH-}', commit '${GIT_COMMIT-}'"
    build_docker_thirdparty
  fi
}

function do_build_in_docker()
{
  echo "--- :gear: Compiling project '${PROJECT_REPO-}' - branch '${GIT_BRANCH-}', commit '${GIT_COMMIT-}'"

  cd "${OUTPUT_DIR}"

  if [[ ! -f "Makefile" ]]; then
    cmake -DCMAKE_BUILD_TYPE=Release ..
  fi

  make -j"$(nproc)"
}

function post_docker()
{
  :
}


DOCKER_WORKDIR="/app"
OUTPUT_DIR="build-output"
DOCKER_IMAGE_NAME="cyusbserial_sdk:build"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPT_SHORT_DIR="$( dirname "${BASH_SOURCE[0]}" )"
SCRIPT_NAME="$( basename "${BASH_SOURCE[0]}" )"
cd "${SCRIPT_DIR}/.."

# shellcheck source=do/private/parse_options_utils.sh
source "${SCRIPT_DIR}/private/parse_options_utils.sh"

do_all build -- \
  --volume="$(pwd):${DOCKER_WORKDIR}" \
  --workdir="${DOCKER_WORKDIR}" \
  "${DOCKER_IMAGE_NAME}"
